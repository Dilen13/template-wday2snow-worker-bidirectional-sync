<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:wd-integration="http://www.mulesoft.org/schema/mule/wd-integration" xmlns:wd-staffing="http://www.mulesoft.org/schema/mule/wd-staffing" xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/wd-staffing http://www.mulesoft.org/schema/mule/wd-staffing/current/mule-wd-staffing.xsd
http://www.mulesoft.org/schema/mule/wd-integration http://www.mulesoft.org/schema/mule/wd-integration/current/mule-wd-integration.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd" >
     
    <batch:job name="syncBatchWorkday" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="GetLastEvent" accept-expression="payload.lastEventType != null &amp;&amp; payload.lastEventValue != null">
                <enricher source="#[payload]" target="#[recordVars['lastEvent']]" doc:name="store the value in 'recordVars['lastEvent']'">
                    <processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Prepare GetEventDetailsRequestType request">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	requestReferences: {
		eventReference: [{
			ID: [{				
				type: payload.lastEventType,
				value: payload.lastEventValue
			}]
		}]
	}
} as :object {
	class : "com.workday.integrations.GetEventDetailsRequestType"
}]]></dw:set-payload>
                        </dw:transform-message>
                        <wd-integration:get-event-detail config-ref="Workday_Integrations"  doc:name="Query for the last event"/>
                        <dw:transform-message doc:name="Get LastModifiedById and LastModifiedDate">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
({
	LastModifiedById : payload.responseData.event[0].eventDetailData.initiatingPersonReference.ID[0].value,
 	LastModifiedDate : payload.responseData.event[0].eventDetailData.completedDate
}) when ((sizeOf payload.responseData.event) > 0) 
   otherwise null
]]></dw:set-payload>
                        </dw:transform-message>
                    </processor-chain>
                </enricher>
            </batch:step>

			<batch:step name="getUserInServiceNowIfExists" accept-expression="#[recordVars['lastEvent'] == null || recordVars['lastEvent'].LastModifiedById != '${wday.integration.user.id}']">

                <enricher source="#[payload]" target="#[recordVars['userInTargetInstance']]" doc:name="store the existence of the user in target instance">
                    <processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Prepare getUsers request">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
{
	ns0#getRecords: {
		ns0#"user_name": payload.userName
	}
}]]></dw:set-payload>
                        </dw:transform-message>
                        <servicenow:invoke config-ref="ServiceNow" type="sys_user||getRecords" doc:name="Get Users from ServiceNow"/>
                        <dw:transform-message doc:name="Get records results">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://www.service-now.com/sys_user
---
payload.getRecordsResponse.*getRecordsResult when (payload.getRecordsResponse != '' and payload.getRecordsResponse != null) 
											 otherwise []]]></dw:set-payload>
                        </dw:transform-message>


            		</processor-chain>
                </enricher>
            </batch:step>
                        <batch:step name="InsertUserInServiceNowIfItDoesntExist" accept-expression="#[recordVars['lastEvent'] != null &amp;&amp; recordVars['lastEvent'].LastModifiedById != '${wday.integration.user.id}' &amp;&amp; recordVars['userInTargetInstance'].isEmpty()]">
                <logger message="inserting user to ServiceNow: #[payload]" level="INFO" doc:name="Log the insertion of the User"/>
                <dw:transform-message doc:name="Prepare insertUser request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
{
	ns0#insert: {
		ns0#active: payload.active,
		ns0#city: payload.city,
		ns0#country: payload.country,
		ns0#email: payload.email,
		ns0#"employee_number": payload.employeeNumber,
		ns0#"first_name": payload.firstName,
		ns0#"home_phone": payload.homePhone,
		ns0#"last_name": payload.lastName,
		ns0#"middle_name": payload.middleName,
		ns0#name: payload.name,
		ns0#state: payload.state,
		ns0#street: payload.street,
		ns0#"user_name": payload.userName,
		ns0#zip: payload.zip
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <servicenow:invoke config-ref="ServiceNow" type="sys_user||insert" doc:name="Insert User to ServiceNow"/>

            </batch:step>
            <batch:step name="UpdateUserInServiceNowIfItExists" accept-expression="#[(recordVars['lastEvent'] != null &amp;&amp; recordVars['lastEvent'].LastModifiedById != '${wday.integration.user.id}' &amp;&amp; !recordVars['userInTargetInstance'].isEmpty()) || (recordVars['lastEvent'] == null &amp;&amp; !recordVars['userInTargetInstance'].isEmpty())]">
                <logger message="updating user in ServiceNow: #[payload]" level="INFO" doc:name="Log the update of the User"/>

                <dw:transform-message doc:name="Prepare updateUser request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user

%function lookupCountryISOCode(wdayISOCode){
	code: 'US' when wdayISOCode == 'USA' otherwise null	
}
---
{
	ns0#update: {		
		ns0#active: payload.active,
		ns0#city: payload.city,
		(ns0#country: lookupCountryISOCode(payload.country).code) when lookupCountryISOCode(payload.country).code != null,
		ns0#email: payload.email,
		ns0#"employee_number": payload.employeeNumber,
		ns0#"first_name": payload.firstName,
		ns0#"home_phone": payload.homePhone,
		ns0#"last_name": payload.lastName,
		ns0#"middle_name": payload.middleName,
		ns0#name: payload.name,
		ns0#state: payload.state,
		ns0#street: payload.street,
		ns0#"user_name": payload.userName,
		ns0#"zip": payload.zip,
		ns0#"sys_id": recordVars.userInTargetInstance[0].sys_id
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <servicenow:invoke config-ref="ServiceNow" type="sys_user||update" doc:name="Update User in ServiceNow"/>

            </batch:step>

        </batch:process-records>
        <batch:on-complete>
        	<json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
            <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log the batch result"/>
            <expression-component doc:name="Release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>

    <batch:job name="syncBatchServiceNow" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="storeUserInformation" >
                <logger message="ServiceNow user: #[payload]" level="INFO" doc:name="Log the ServiceNow user"/>
                <batch:set-record-variable variableName="snowUser" value="#[payload]" doc:name="store Service Now user"/>
                <batch:set-record-variable variableName="userUpdatedBy" value="#[payload['sys_updated_by']]" doc:name="Store User sysUpdatedBy"/>
            </batch:step>

            <batch:step name="findUserInWorkdayStep" accept-expression="#[payload['user_name'] != '']">

                <enricher source="#[payload]" target="#[recordVars['workerInTargetInstance']]" doc:name="store the existence of the user in target instance">
                   <processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Prepare GetWorkersRequestType request">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	requestReferences: {
		workerReference: [{
			ID: [{
				type: "Employee_ID",
				value: payload.user_name
			}]
		}]
	},
	responseGroup: {
		includeEmploymentInformation: true,
		includeOrganizations: true,
		includePersonalInformation: true,
		includeReference: true,
		includeRoles: true,
		includeTransactionLogData: true,
		includeUserAccount: true
	}
} as :object {
	class : "com.workday.hr.GetWorkersRequestType"
}]]></dw:set-payload>
                        </dw:transform-message>
                    	<wd-hr:get-workers config-ref="Workday_Human_Resource" doc:name="Get Workers from Workday" />
                	</processor-chain>
                </enricher>

            </batch:step>

            <batch:step name="InsertEmployeeInWorkdayIfWorkerDoesntExist" accept-expression="#[(recordVars['workerInTargetInstance'] == null)]">

                <dw:transform-message doc:name="Transform User To HireEmployeeRequestType">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java

%function lookupCountryISOCode (snowCode) {
	code: 'USA' when snowCode == 'US' otherwise p('wday.country')
}
---
{
	hireEmployeeData: {
		addAcademicAppointmentSubProcess: {
			addAcademicAppointmentData: {
				createAcademicAffiliateData: {
					contactInformationData: {
						addressData: [{
							addressLineData: [{
								type: "ADDRESS_LINE_1",
								value: payload.street when payload.street != '' otherwise p('wday.location')
							}]							
						}]						
					}
				}
			}	
		},
		applicantData: {
			personalData: {
				contactData: {
					addressData: [{
						countryReference: {
							ID: [{
								type: "ISO_3166-1_Alpha-3_Code",
								value: lookupCountryISOCode(payload.country).code
							}]
						},
						countryRegionReference: {
							ID: [{
								type: "Country_Region_ID",
								value: p('wday.state') when payload.state == '' otherwise payload.state
							}]
						},
						(effectiveDate: payload.sysCreatedOn as :date {format: "yyyy-MM-dd HH:mm:ss"}) when payload.sysCreatedOn != '',
						municipality: p('wday.city') when payload.city == '' otherwise payload.city,
						postalCode: p('wday.postalCode') when payload.zip == '' otherwise payload.zip,
						usageData: [{
							public: false,
							typeData: [{
								primary: true,
								typeReference: {
									ID: [{
										type: "Communication_Usage_Type_ID",
										value: "HOME"
									}]
								}
							}]							
						}]
					}],
					emailAddressData: [{
						emailAddress: payload.email,
						usageData: [{
							public: true,
							typeData: [{
								primary: true,
								typeReference: {
									ID: [{
										type: "Communication_Usage_Type_ID",
										value: "HOME"
									}]
								}
							}]
						}]
					}],
					phoneData: [{
						phoneDeviceTypeReference: {
							ID: [{
								type: "Phone_Device_Type_ID",
								value: "1063.5"
							}]
						},
						phoneNumber : payload.home_phone,
						countryISOCode : lookupCountryISOCode(payload.country).code,
						
						usageData: [{
							public: true,
							typeData: [{
								primary: true,
								typeReference: {
									ID: [{
										type: "Communication_Usage_Type_ID",
										value: "HOME"
									}]
								}
							}]
						}]
					}]					
				},
				nameData: {					
					legalNameData: {
						nameDetailData: {
							countryReference: {
								ID: [{
									type : "ISO_3166-1_Alpha-3_Code",
									value : lookupCountryISOCode(payload.country).code
								}]
							},
							firstName : payload.first_name,
							lastName : payload.last_name,							
							middleName : payload.middle_name
						}
					}
				}				
			}
		},
		hireEmployeeEventData: {
			employeeTypeReference: {
				ID: [{
					type: "Employee_Type_ID",
					value: "Regular"
				}]
			},			
			hireReasonReference: {
				ID: [{
					type: "General_Event_Subcategory_ID",
					value: "Hire_Employee_New_Hire_Fill_Vacancy"
				}]
			},
			positionDetails: {				
				jobProfileReference: {
					ID: [{
						type: "Job_Profile_ID",
						value: p('wday.jobprofileId')
					}]
				},
				locationReference: {
					ID: [{
						type: "Location_ID",
						value: p('wday.location')
					}]
				},
				payRateTypeReference: {
					ID: [{
						type: "Pay_Rate_Type_ID",
						value: "Salary"
					}]
				},				
				positionTimeTypeReference: {
					ID: [{
						type: "Position_Time_Type_ID",
						value: "Full_time"
					}]
				}
			}
		},
		organizationReference: {
			ID: [{
				type: "Organization_Reference_ID",
				value: p('wday.organization')
			}]
		}
	}
} as :object {
	class : "com.workday.staffing.HireEmployeeRequestType"
}]]></dw:set-payload>
                </dw:transform-message>

                <wd-staffing:hire-employee config-ref="Workday_Staffing" doc:name="Hire Employee"/>

                <dw:transform-message doc:name="Prepare update of User username request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
{
	ns0#update: {
		ns0#"user_name": recordVars.snowUser.sys_id,
		// get the ID of the new employee
		ns0#"sys_id": payload.employeeReference.ID[1].value	
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <servicenow:invoke config-ref="ServiceNow" type="sys_user||update" doc:name="Update User username in ServiceNow"/>
 
<!--                 <servicenow:update config-ref="ServiceNow" type="SYS_USER" doc:name="Update userName in Service Now"> -->

            </batch:step>
            <batch:step name="updateWorkerInWorkdayIfWorkerExists" accept-expression="#[(recordVars['workerInTargetInstance'] != null &amp;&amp; recordVars['workerInTargetInstance'].responseData != null)]">

 <dw:transform-message doc:name="Transform User To MaintainContactInformationForPersonEventRequestType">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java

%function lookupCountryISOCode(snowISOCode){
	code: 'USA' when snowISOCode == 'US' otherwise p('wday.country')	
}
---
{
	maintainContactInformationData: {
		(effectiveDate: payload.sys_updated_on as :date {format: "yyyy-MM-dd HH:mm:ss"}) when payload.sys_updated_on != '',
		workerContactInformationData: {
			addressData: [{
				addressLineData: [{
					type : "ADDRESS_LINE_1",
					value: p('wday.location') when payload.street == '' otherwise payload.street
				}],
				countryReference: {
					ID: [{
						type: "ISO_3166-1_Alpha-3_Code",
						value: lookupCountryISOCode(payload.country).code
					}]
				},
				countryRegionReference: {
					ID: [{
						type: "Country_Region_ID",
						value: p('wday.state') when payload.state == '' otherwise payload.state
					}]
				},				
				(effectiveDate: payload.sys_updated_on as :date {format:"yyyy-MM-dd HH:mm:ss"} ) when payload.sys_updated_on != '',
				municipality: p('wday.city') when payload.city == '' otherwise payload.city,
				postalCode: p('wday.postalCode') when payload.zip == '' otherwise payload.zip,
				usageData: [{					
					public: false,
					typeData: [{
						typeReference: {
							ID: [{
								type: "Communication_Usage_Type_ID",
								value: "HOME"
							}]
						}
					}]
				}]
			}],
			emailAddressData: [{
				emailAddress: payload.email,
				usageData: [{
					public: true,
					typeData: [{
						typeReference: {
							ID: [{
								type: "Communication_Usage_Type_ID",
								value: "HOME"
							}]
						}
					}]
				}]
			}],
			(phoneData: [{
				countryISOCode: lookupCountryISOCode(payload.country).code,
				phoneDeviceTypeReference: {
					ID: [{
						type: "Phone_Device_Type_ID",
						value: "1063.5"
					}]
				},
				phoneNumber: payload.home_phone,
				usageData: [{
					public: true,
					typeData: [{
						typeReference: {
							ID: [{
								type: "Communication_Usage_Type_ID",
								value: "HOME"
							}]
						}
					}]
				}]
			}]) when payload.home_phone != ''			
		},
		workerReference: {
			ID: [{
				type: "Employee_ID",
				value: payload.user_name
			}]
		}
	}
} as :object {
	class : "com.workday.hr.MaintainContactInformationForPersonEventRequestType"
}]]></dw:set-payload>
                </dw:transform-message>


                <wd-hr:maintain-contact-information config-ref="Workday_Human_Resource" doc:name="Update Contact Information"/>

                <set-payload value="#[recordVars['snowUser']]" doc:name="Set Payload to Service Now User"/>

                <dw:transform-message doc:name="Transform User To ChangePreferredNameRequestType">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java

%function lookupCountryISOCode(snowISOCode){
	code: 'USA' when snowISOCode == 'US' otherwise p('wday.country')	
}
---
{
	changePreferredNameData: {
		nameData: {
			countryReference: {
				ID: [{
					type: "ISO_3166-1_Alpha-3_Code",
					value: lookupCountryISOCode(payload.country).code
				}]
			},
			firstName: payload.first_name,
			lastName: payload.last_name,
			(middleName: payload.middle_name) when payload.middle_name != ''		
		},
		workerReference: {
			ID: [{
				type: "Employee_ID",
				value: payload.user_name
			}]
		}
	}
} as :object {
	class : "com.workday.hr.ChangePreferredNameRequestType"
}]]></dw:set-payload>
                </dw:transform-message>

                <wd-hr:change-preferred-name config-ref="Workday_Human_Resource" doc:name="Workday Human Resource"/>


            </batch:step>
        </batch:process-records>
        <batch:on-complete>
        	<json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
            <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log the batch result"/>
            <expression-component doc:name="Release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
</mule>
