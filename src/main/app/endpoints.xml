<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:wd-staffing="http://www.mulesoft.org/schema/mule/wd-staffing" xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/wd-staffing http://www.mulesoft.org/schema/mule/wd-staffing/current/mule-wd-staffing.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    
    <!-- This is the endpoints file. In this file you should declare your inbound and outbound endpoints in order to control the access to your integration -->

    <flow name="triggerSyncFromWorkdayFlow"  processingStrategy="synchronous" initialState="started">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="${poll.startDelayMillis}" />
			<watermark variable="lastQueryDateA" default-expression="${wday.watermark.default.expression}" update-expression="#[flowVars.updatedThrough]"/>
            <processor-chain doc:name="Processor Chain">
            	<expression-component doc:name="Lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <logger message="Fetching Workday updates: #[flowVars.lastQueryDate]" level="INFO" doc:name="Log 'Fetching Workday updates...'"/>
                <dw:transform-message doc:name="Create getWorkersRequest">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	requestCriteria: {		
		transactionLogCriteriaData: [
			{
				transactionDateRangeData: {
					updatedFrom		: flowVars.lastQueryDateA,
					updatedThrough	: now - |PT6S|
				}
			}
		]
	},
	responseGroup: {
		includeUserAccount			: true,
		includeReference			: true,
		includeRoles				: true,
		includePersonalInformation	: true,
		includeOrganizations		: true, 
		includeEmploymentInformation: true,
		includeReference			: true,
		includeTransactionLogData	: true
	}

} as :object {class: "com.workday.hr.GetWorkersRequestType"}]]></dw:set-payload>
                </dw:transform-message>
                <wd-hr:get-workers config-ref="Workday_Human_Resource"  doc:name="Fetch Workers from Workday"/>
			</processor-chain>
		</poll>
        <set-variable variableName="updatedThrough" value="#[payload.getRequestCriteria().getTransactionLogCriteriaData().get(0).getTransactionDateRangeData().getUpdatedThrough()]" doc:name="Set updatedThrough"/>


        <dw:transform-message doc:name="GetWorkersResponseType to Map">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var response = payload as :object { class: "com.workday.hr.GetWorkersResponseType" }
---
response.responseData.worker map {
		name : $.workerData.personalData.nameData.preferredNameData.nameDetailData.formattedName,
		active : $.workerData.employmentData.workerStatusData.active,
		firstName : $.workerData.personalData.nameData.preferredNameData.nameDetailData.firstName,
		lastName : $.workerData.personalData.nameData.preferredNameData.nameDetailData.lastName,
		middleName : $.workerData.personalData.nameData.preferredNameData.nameDetailData.middleName,
		email : $.workerData.personalData.contactData.emailAddressData[-1].emailAddress,
		country : $.workerData.personalData.contactData.addressData[-1].countryReference.ID[2].value,
		employeeNumber : $.workerData.personalData.nameData.preferredNameData.nameDetailData.firstName ++ "." ++ $.workerData.personalData.nameData.preferredNameData.nameDetailData.lastName,
		homePhone : $.workerData.personalData.contactData.phoneData[-1].phoneNumber,
		"zip" : $.workerData.personalData.contactData.addressData[-1].postalCode,
		street : $.workerData.personalData.contactData.addressData[-1].addressLineData[-1].value,
		city : $.workerData.personalData.contactData.addressData[-1].municipality,
		state : $.workerData.personalData.contactData.addressData[-1].countryRegionReference[-1].ID[-1].value,
		userName : $.workerReference.ID[1].value,
		LastModifiedOn : payload.requestCriteria.transactionLogCriteriaData[0].transactionDateRangeData.updatedThrough,		
		lastEventType : $.workerData.transactionLogEntryData.transactionLogEntry[0].transactionLogReference.ID[0].type,
		lastEventValue : $.workerData.transactionLogEntryData.transactionLogEntry[0].transactionLogReference.ID[0].value		
} unless (response.responseData is :null) otherwise []

]]></dw:set-payload>
        </dw:transform-message>


        <choice doc:name="Filter empty result set">
            <when expression="payload.size() == 0">
                <expression-component doc:name="Release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
            </when>
            <otherwise>
                <batch:execute name="syncBatchWorkday" doc:name="Execute syncBatchWorkday"/>
            </otherwise>
        </choice>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

	<flow name="triggerSyncFromServiceNowFlow"  processingStrategy="synchronous" initialState="started">
   		<poll doc:name="Poll">
   			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="${poll.startDelayMillis}" />
   			<watermark variable="lastQueryDateB" default-expression="${snow.watermark.default.expression}" selector="MAX" selector-expression="#[payload.sys_updated_on]"/>
            <processor-chain doc:name="Processor Chain">
            	<expression-component doc:name="Lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <logger message="Fetching ServiceNow updates: #[flowVars.lastQueryDateB] GMT" level="INFO" doc:name="Log 'Fetching ServiceNow updates...'"/>
                <dw:transform-message doc:name="Prepare Users request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
{
	ns0#getRecords: {
		ns0#"sys_updated_on": (">" ++ flowVars.lastQueryDateB),
		ns0#"sys_updated_by": "<>" ++ p('snow.integration.user.id')
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <servicenow:invoke config-ref="ServiceNow" type="sys_user||getRecords" doc:name="Fetch Users from ServiceNow"/>
                <dw:transform-message doc:name="Transform GetRecordsResponse To Collection of Maps">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://www.service-now.com/sys_user
---
payload.getRecordsResponse.*getRecordsResult when (payload.getRecordsResponse != '' and payload.getRecordsResponse != null) otherwise []
]]></dw:set-payload>
                </dw:transform-message>


			</processor-chain>
		</poll>
        <choice doc:name="Filter empty result set">
            <when expression="#[payload.size() == 0]">
                <expression-component doc:name="Release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
            </when>
            <otherwise>
                <batch:execute name="syncBatchServiceNow" doc:name="Execute syncBatchServiceNow"/>
            </otherwise>
        </choice>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
